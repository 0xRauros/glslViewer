#!/usr/bin/env python

import sys

# http://eyalarubas.com/python-subproc-nonblock.html
from subprocess import Popen, PIPE
from time import sleep
from fcntl import fcntl, F_GETFL, F_SETFL
from os import O_NONBLOCK, read

import pylab
from pylab import *

class Shader:
    COMMAND='glslViewer'
    process = {}
    cout = {}
    time = 0.
    delta = 0.
    fps = 0

    def __init__(self):
        shader_file = '../examples/test.frag';
        self.process = Popen([self.COMMAND,shader_file], stdin=PIPE, stdout=PIPE, stderr = PIPE, shell=False)
        flags = fcntl(self.process.stdout, F_GETFL) # get current self.process.stdout flags
        fcntl(self.process.stdout, F_SETFL, flags | O_NONBLOCK)
        # self.cout = NonBlockingStreamReader(self.process)

    def read(self):
        while True:
            try:
                return read(self.process.stdout.fileno(), 1024).rstrip()
            except OSError:
                return 'none'

    def isFinish(self):
        return self.process.poll() is not None
    def getTime(self):
        self.process.stdin.write('time\n')
        sleep(0.1)
        answer = self.read()
        if answer:
            if answer.replace('.','',1).isdigit():
                self.time = float(answer)
        return self.time
        
    def getDelta(self):
        self.process.stdin.write('delta\n')
        sleep(0.1)
        answer = self.read()
        if answer:
            if answer.replace('.','',1).isdigit():
                self.delta = float(answer)
        return self.delta


    def getFPS(self):
        return self.process.stdin.write('fps\n')
        sleep(0.1)
        answer = self.read()
        if answer:
            if answer.replace('.','',1).isdigit():
                self.fps = float(answer)
        return self.fps

test = Shader()
# completed = False
# while not completed:
#     print 'delta:', test.getDelta()
#     if test.isFinish():
#         completed = True

xAchse=pylab.arange(0,100,1)
yAchse=pylab.array([0]*100)

fig = pylab.figure(1)
ax = fig.add_subplot(111)
ax.grid(True)
ax.set_title("Realtime Waveform Plot")
ax.set_xlabel("Time")
ax.set_ylabel("Render Delta")
ax.axis([0,100,-0.5,0.5])
line1=ax.plot(xAchse,yAchse,'-')

manager = pylab.get_current_fig_manager()

values = []
values = [0 for x in range(100)]

# completed = False
# while not completed:
#     # print 'delta:', test.getDelta()
#     if test.isFinish():
#         completed = True
#         break

def SinwaveformGenerator(arg):
    global values
    if test.isFinish():
        return
    values.append(test.getDelta())

def RealtimePloter(arg):
    global values
    CurrentXAxis=pylab.arange(len(values)-100,len(values),1)
    line1[0].set_data(CurrentXAxis,pylab.array(values[-100:]))
    ax.axis([CurrentXAxis.min(),CurrentXAxis.max(),-.5,.5])
    manager.canvas.draw()
    # manager.show()

timer = fig.canvas.new_timer(interval=20)
timer.add_callback(RealtimePloter, ())
timer2 = fig.canvas.new_timer(interval=20)
timer2.add_callback(SinwaveformGenerator, ())
timer.start()
timer2.start()

pylab.show()

print "Finish"